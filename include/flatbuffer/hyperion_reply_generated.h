// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HYPERIONREPLY_HYPERIONNET_H_
#define FLATBUFFERS_GENERATED_HYPERIONREPLY_HYPERIONNET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace hyperionnet {

struct Reply;
struct ReplyBuilder;

struct Reply FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReplyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4,
    VT_VIDEO = 6,
    VT_REGISTERED = 8
  };
  const ::flatbuffers::String *error() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ERROR);
  }
  int32_t video() const {
    return GetField<int32_t>(VT_VIDEO, -1);
  }
  int32_t registered() const {
    return GetField<int32_t>(VT_REGISTERED, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyString(error()) &&
           VerifyField<int32_t>(verifier, VT_VIDEO, 4) &&
           VerifyField<int32_t>(verifier, VT_REGISTERED, 4) &&
           verifier.EndTable();
  }
};

struct ReplyBuilder {
  typedef Reply Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_error(::flatbuffers::Offset<::flatbuffers::String> error) {
    fbb_.AddOffset(Reply::VT_ERROR, error);
  }
  void add_video(int32_t video) {
    fbb_.AddElement<int32_t>(Reply::VT_VIDEO, video, -1);
  }
  void add_registered(int32_t registered) {
    fbb_.AddElement<int32_t>(Reply::VT_REGISTERED, registered, -1);
  }
  explicit ReplyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Reply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Reply>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Reply> CreateReply(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> error = 0,
    int32_t video = -1,
    int32_t registered = -1) {
  ReplyBuilder builder_(_fbb);
  builder_.add_registered(registered);
  builder_.add_video(video);
  builder_.add_error(error);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Reply> CreateReplyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *error = nullptr,
    int32_t video = -1,
    int32_t registered = -1) {
  auto error__ = error ? _fbb.CreateString(error) : 0;
  return hyperionnet::CreateReply(
      _fbb,
      error__,
      video,
      registered);
}

inline const hyperionnet::Reply *GetReply(const void *buf) {
  return ::flatbuffers::GetRoot<hyperionnet::Reply>(buf);
}

inline const hyperionnet::Reply *GetSizePrefixedReply(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<hyperionnet::Reply>(buf);
}

inline bool VerifyReplyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hyperionnet::Reply>(nullptr);
}

inline bool VerifySizePrefixedReplyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hyperionnet::Reply>(nullptr);
}

inline void FinishReplyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hyperionnet::Reply> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReplyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hyperionnet::Reply> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hyperionnet

#endif  // FLATBUFFERS_GENERATED_HYPERIONREPLY_HYPERIONNET_H_
