// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HYPERIONREQUEST_HYPERIONNET_H_
#define FLATBUFFERS_GENERATED_HYPERIONREQUEST_HYPERIONNET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace hyperionnet {

struct Register;
struct RegisterBuilder;

struct RawImage;
struct RawImageBuilder;

struct NV12Image;
struct NV12ImageBuilder;

struct Image;
struct ImageBuilder;

struct Clear;
struct ClearBuilder;

struct Color;
struct ColorBuilder;

struct Request;
struct RequestBuilder;

enum ImageType : uint8_t {
  ImageType_NONE = 0,
  ImageType_RawImage = 1,
  ImageType_NV12Image = 2,
  ImageType_MIN = ImageType_NONE,
  ImageType_MAX = ImageType_NV12Image
};

inline const ImageType (&EnumValuesImageType())[3] {
  static const ImageType values[] = {
    ImageType_NONE,
    ImageType_RawImage,
    ImageType_NV12Image
  };
  return values;
}

inline const char * const *EnumNamesImageType() {
  static const char * const names[4] = {
    "NONE",
    "RawImage",
    "NV12Image",
    nullptr
  };
  return names;
}

inline const char *EnumNameImageType(ImageType e) {
  if (::flatbuffers::IsOutRange(e, ImageType_NONE, ImageType_NV12Image)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesImageType()[index];
}

template<typename T> struct ImageTypeTraits {
  static const ImageType enum_value = ImageType_NONE;
};

template<> struct ImageTypeTraits<hyperionnet::RawImage> {
  static const ImageType enum_value = ImageType_RawImage;
};

template<> struct ImageTypeTraits<hyperionnet::NV12Image> {
  static const ImageType enum_value = ImageType_NV12Image;
};

bool VerifyImageType(::flatbuffers::Verifier &verifier, const void *obj, ImageType type);
bool VerifyImageTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum Command : uint8_t {
  Command_NONE = 0,
  Command_Color = 1,
  Command_Image = 2,
  Command_Clear = 3,
  Command_Register = 4,
  Command_MIN = Command_NONE,
  Command_MAX = Command_Register
};

inline const Command (&EnumValuesCommand())[5] {
  static const Command values[] = {
    Command_NONE,
    Command_Color,
    Command_Image,
    Command_Clear,
    Command_Register
  };
  return values;
}

inline const char * const *EnumNamesCommand() {
  static const char * const names[6] = {
    "NONE",
    "Color",
    "Image",
    "Clear",
    "Register",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommand(Command e) {
  if (::flatbuffers::IsOutRange(e, Command_NONE, Command_Register)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommand()[index];
}

template<typename T> struct CommandTraits {
  static const Command enum_value = Command_NONE;
};

template<> struct CommandTraits<hyperionnet::Color> {
  static const Command enum_value = Command_Color;
};

template<> struct CommandTraits<hyperionnet::Image> {
  static const Command enum_value = Command_Image;
};

template<> struct CommandTraits<hyperionnet::Clear> {
  static const Command enum_value = Command_Clear;
};

template<> struct CommandTraits<hyperionnet::Register> {
  static const Command enum_value = Command_Register;
};

bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type);
bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Register FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RegisterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGIN = 4,
    VT_PRIORITY = 6
  };
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY, 4) &&
           verifier.EndTable();
  }
};

struct RegisterBuilder {
  typedef Register Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Register::VT_ORIGIN, origin);
  }
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(Register::VT_PRIORITY, priority, 0);
  }
  explicit RegisterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Register> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Register>(end);
    fbb_.Required(o, Register::VT_ORIGIN);
    return o;
  }
};

inline ::flatbuffers::Offset<Register> CreateRegister(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    int32_t priority = 0) {
  RegisterBuilder builder_(_fbb);
  builder_.add_priority(priority);
  builder_.add_origin(origin);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Register> CreateRegisterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *origin = nullptr,
    int32_t priority = 0) {
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return hyperionnet::CreateRegister(
      _fbb,
      origin__,
      priority);
}

struct RawImage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RawImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_WIDTH = 6,
    VT_HEIGHT = 8
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, -1);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
};

struct RawImageBuilder {
  typedef RawImage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(RawImage::VT_DATA, data);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(RawImage::VT_WIDTH, width, -1);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(RawImage::VT_HEIGHT, height, -1);
  }
  explicit RawImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RawImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RawImage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RawImage> CreateRawImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    int32_t width = -1,
    int32_t height = -1) {
  RawImageBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RawImage> CreateRawImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    int32_t width = -1,
    int32_t height = -1) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return hyperionnet::CreateRawImage(
      _fbb,
      data__,
      width,
      height);
}

struct NV12Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NV12ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_Y = 4,
    VT_DATA_UV = 6,
    VT_WIDTH = 8,
    VT_HEIGHT = 10,
    VT_STRIDE_Y = 12,
    VT_STRIDE_UV = 14
  };
  const ::flatbuffers::Vector<uint8_t> *data_y() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA_Y);
  }
  const ::flatbuffers::Vector<uint8_t> *data_uv() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA_UV);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t stride_y() const {
    return GetField<int32_t>(VT_STRIDE_Y, 0);
  }
  int32_t stride_uv() const {
    return GetField<int32_t>(VT_STRIDE_UV, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA_Y) &&
           verifier.VerifyVector(data_y()) &&
           VerifyOffset(verifier, VT_DATA_UV) &&
           verifier.VerifyVector(data_uv()) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_UV, 4) &&
           verifier.EndTable();
  }
};

struct NV12ImageBuilder {
  typedef NV12Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_y(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data_y) {
    fbb_.AddOffset(NV12Image::VT_DATA_Y, data_y);
  }
  void add_data_uv(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data_uv) {
    fbb_.AddOffset(NV12Image::VT_DATA_UV, data_uv);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(NV12Image::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(NV12Image::VT_HEIGHT, height, 0);
  }
  void add_stride_y(int32_t stride_y) {
    fbb_.AddElement<int32_t>(NV12Image::VT_STRIDE_Y, stride_y, 0);
  }
  void add_stride_uv(int32_t stride_uv) {
    fbb_.AddElement<int32_t>(NV12Image::VT_STRIDE_UV, stride_uv, 0);
  }
  explicit NV12ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NV12Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NV12Image>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NV12Image> CreateNV12Image(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data_y = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data_uv = 0,
    int32_t width = 0,
    int32_t height = 0,
    int32_t stride_y = 0,
    int32_t stride_uv = 0) {
  NV12ImageBuilder builder_(_fbb);
  builder_.add_stride_uv(stride_uv);
  builder_.add_stride_y(stride_y);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_data_uv(data_uv);
  builder_.add_data_y(data_y);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NV12Image> CreateNV12ImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data_y = nullptr,
    const std::vector<uint8_t> *data_uv = nullptr,
    int32_t width = 0,
    int32_t height = 0,
    int32_t stride_y = 0,
    int32_t stride_uv = 0) {
  auto data_y__ = data_y ? _fbb.CreateVector<uint8_t>(*data_y) : 0;
  auto data_uv__ = data_uv ? _fbb.CreateVector<uint8_t>(*data_uv) : 0;
  return hyperionnet::CreateNV12Image(
      _fbb,
      data_y__,
      data_uv__,
      width,
      height,
      stride_y,
      stride_uv);
}

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6,
    VT_DURATION = 8
  };
  hyperionnet::ImageType data_type() const {
    return static_cast<hyperionnet::ImageType>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const hyperionnet::RawImage *data_as_RawImage() const {
    return data_type() == hyperionnet::ImageType_RawImage ? static_cast<const hyperionnet::RawImage *>(data()) : nullptr;
  }
  const hyperionnet::NV12Image *data_as_NV12Image() const {
    return data_type() == hyperionnet::ImageType_NV12Image ? static_cast<const hyperionnet::NV12Image *>(data()) : nullptr;
  }
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           VerifyImageType(verifier, data(), data_type()) &&
           VerifyField<int32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
};

template<> inline const hyperionnet::RawImage *Image::data_as<hyperionnet::RawImage>() const {
  return data_as_RawImage();
}

template<> inline const hyperionnet::NV12Image *Image::data_as<hyperionnet::NV12Image>() const {
  return data_as_NV12Image();
}

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_type(hyperionnet::ImageType data_type) {
    fbb_.AddElement<uint8_t>(Image::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Image::VT_DURATION, duration, -1);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    fbb_.Required(o, Image::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    hyperionnet::ImageType data_type = hyperionnet::ImageType_NONE,
    ::flatbuffers::Offset<void> data = 0,
    int32_t duration = -1) {
  ImageBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

struct Clear FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClearBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRIORITY = 4
  };
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY, 4) &&
           verifier.EndTable();
  }
};

struct ClearBuilder {
  typedef Clear Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(Clear::VT_PRIORITY, priority, 0);
  }
  explicit ClearBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Clear> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Clear>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Clear> CreateClear(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t priority = 0) {
  ClearBuilder builder_(_fbb);
  builder_.add_priority(priority);
  return builder_.Finish();
}

struct Color FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ColorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_DURATION = 6
  };
  int32_t data() const {
    return GetField<int32_t>(VT_DATA, -1);
  }
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA, 4) &&
           VerifyField<int32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
};

struct ColorBuilder {
  typedef Color Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(int32_t data) {
    fbb_.AddElement<int32_t>(Color::VT_DATA, data, -1);
  }
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Color::VT_DURATION, duration, -1);
  }
  explicit ColorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Color> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Color>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Color> CreateColor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data = -1,
    int32_t duration = -1) {
  ColorBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_data(data);
  return builder_.Finish();
}

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMAND_TYPE = 4,
    VT_COMMAND = 6
  };
  hyperionnet::Command command_type() const {
    return static_cast<hyperionnet::Command>(GetField<uint8_t>(VT_COMMAND_TYPE, 0));
  }
  const void *command() const {
    return GetPointer<const void *>(VT_COMMAND);
  }
  template<typename T> const T *command_as() const;
  const hyperionnet::Color *command_as_Color() const {
    return command_type() == hyperionnet::Command_Color ? static_cast<const hyperionnet::Color *>(command()) : nullptr;
  }
  const hyperionnet::Image *command_as_Image() const {
    return command_type() == hyperionnet::Command_Image ? static_cast<const hyperionnet::Image *>(command()) : nullptr;
  }
  const hyperionnet::Clear *command_as_Clear() const {
    return command_type() == hyperionnet::Command_Clear ? static_cast<const hyperionnet::Clear *>(command()) : nullptr;
  }
  const hyperionnet::Register *command_as_Register() const {
    return command_type() == hyperionnet::Command_Register ? static_cast<const hyperionnet::Register *>(command()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COMMAND_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_COMMAND) &&
           VerifyCommand(verifier, command(), command_type()) &&
           verifier.EndTable();
  }
};

template<> inline const hyperionnet::Color *Request::command_as<hyperionnet::Color>() const {
  return command_as_Color();
}

template<> inline const hyperionnet::Image *Request::command_as<hyperionnet::Image>() const {
  return command_as_Image();
}

template<> inline const hyperionnet::Clear *Request::command_as<hyperionnet::Clear>() const {
  return command_as_Clear();
}

template<> inline const hyperionnet::Register *Request::command_as<hyperionnet::Register>() const {
  return command_as_Register();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_command_type(hyperionnet::Command command_type) {
    fbb_.AddElement<uint8_t>(Request::VT_COMMAND_TYPE, static_cast<uint8_t>(command_type), 0);
  }
  void add_command(::flatbuffers::Offset<void> command) {
    fbb_.AddOffset(Request::VT_COMMAND, command);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    fbb_.Required(o, Request::VT_COMMAND);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    hyperionnet::Command command_type = hyperionnet::Command_NONE,
    ::flatbuffers::Offset<void> command = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_command(command);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

inline bool VerifyImageType(::flatbuffers::Verifier &verifier, const void *obj, ImageType type) {
  switch (type) {
    case ImageType_NONE: {
      return true;
    }
    case ImageType_RawImage: {
      auto ptr = reinterpret_cast<const hyperionnet::RawImage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ImageType_NV12Image: {
      auto ptr = reinterpret_cast<const hyperionnet::NV12Image *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyImageTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyImageType(
        verifier,  values->Get(i), types->GetEnum<ImageType>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type) {
  switch (type) {
    case Command_NONE: {
      return true;
    }
    case Command_Color: {
      auto ptr = reinterpret_cast<const hyperionnet::Color *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Image: {
      auto ptr = reinterpret_cast<const hyperionnet::Image *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Clear: {
      auto ptr = reinterpret_cast<const hyperionnet::Clear *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Register: {
      auto ptr = reinterpret_cast<const hyperionnet::Register *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCommand(
        verifier,  values->Get(i), types->GetEnum<Command>(i))) {
      return false;
    }
  }
  return true;
}

inline const hyperionnet::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<hyperionnet::Request>(buf);
}

inline const hyperionnet::Request *GetSizePrefixedRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<hyperionnet::Request>(buf);
}

inline bool VerifyRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hyperionnet::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hyperionnet::Request>(nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hyperionnet::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hyperionnet::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hyperionnet

#endif  // FLATBUFFERS_GENERATED_HYPERIONREQUEST_HYPERIONNET_H_
